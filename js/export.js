exportXSF = function () {
  string = "CRYSTAL\n"
  string += "PRIMVEC\n"

  for (i=0; i<this.lat.length; i++) {
    string += (this.lat[i][0]*this.nx).toFixed(12) + " " +
              (this.lat[i][1]*this.ny).toFixed(12) + " " +
              (this.lat[i][2]*this.nz).toFixed(12) + "\n";
  }

  string += "PRIMCOORD 1\n"
  string += this.atoms.length + " 1\n"

  var phase = Complex.Polar(this.amplitude,parseFloat($("#phase").val())/360*2.0*pi);

  for (i=0; i<this.atoms.length; i++) {
    vibrations = this.vibrations[i];
    string += this.atom_numbers[this.atoms[i][0]] + " ";
    for (j=1; j<4; j++) {
      string += (this.atoms[i][j] + phase.mult(vibrations[j-1]).real()).toFixed(12) + " ";
    }
    string += "\n";
  }

  var element = document.createElement('a');
  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(string));
  element.setAttribute('download', this.k.toString()+'_'+this.n.toString()+'_displacement.xsf');
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);

}

exportPOSCAR = function () {
  //deep copy
  var atoms = jQuery.extend(true, [], this.atoms);
  var counter = {};
  var order = [];

  //set the first element to be the atomic number
  for (i=0; i<atoms.length; i++) {
    var atom = atoms[i];
    atom[0] = this.atom_numbers[atom[0]];
    if ( $.inArray(atom[0].toString(), Object.keys(counter)) == -1 ) {
      order.push(atom[0]);
      counter[atom[0]] = 0;
    }
  }

  //we sort the atoms according to atom types (POSCAR format requires so)
  for (i=0; i<atoms.length; i++) {
    counter[atoms[i][0]] += 1;
  }
  atoms.sort();

  string = "";
  for (i=0; i<order.length; i++) {
    string += atomic_symbol[order[i]] + " ";
  }
  string += "generated by phononwebsite: http://henriquemiranda.github.io/phononwebsite/\n";

  string += "1.0\n"

  for (i=0; i<this.lat.length; i++) {
    string += (this.lat[i][0]*this.nx).toFixed(12) + " " +
              (this.lat[i][1]*this.ny).toFixed(12) + " " +
              (this.lat[i][2]*this.nz).toFixed(12) + "\n";
  }

  for (i=0; i<order.length; i++) {
    string += counter[order[i]] + " ";
  }
  string += "\n";

  string += "Cartesian\n"
  var phase = Complex.Polar(this.amplitude,parseFloat($("#phase").val())/360*2.0*pi);
  for (i=0; i<atoms.length; i++) {
    vibrations = this.vibrations[i];
    for (j=1; j<4; j++) {
      string += (atoms[i][j] + phase.mult(vibrations[j-1]).real()).toFixed(12) + " ";
    }
    string += "\n";
  }

  var element = document.createElement('a');
  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(string));
  element.setAttribute('download', this.k.toString()+'_'+this.n.toString()+'_displacement.POSCAR');
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);

}
